# D:\telegram_reminder_bot\handlers\notes.py
from aiogram import Router, types, F
from aiogram.filters import Command
from utils.notes import notes_store
from utils.chat_settings import chat_settings
from utils.note_runtime import set_create_wait, is_create_wait, pop_create_wait

router = Router()

def note_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)", callback_data=f"note:done:{note_id}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç",            callback_data=f"note:keep:{note_id}"),
        ],
        [ types.InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 2—á",    callback_data=f"note:snooze:{note_id}:120") ],
    ])

def remind_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚è∞ 1—á", callback_data=f"note:snooze:{note_id}:60"),
            types.InlineKeyboardButton(text="‚è∞ 2—á", callback_data=f"note:snooze:{note_id}:120"),
            types.InlineKeyboardButton(text="‚è∞ 3—á", callback_data=f"note:snooze:{note_id}:180"),
        ],
        [ types.InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"note:keep:{note_id}") ],
    ])

def add_top_kbd(lang: str) -> types.InlineKeyboardMarkup:
    txt = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É" if lang=="ru" else "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É"
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=txt, callback_data="note:add")]
    ])

# —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è commands.menu_router
add_top_kbd.__all__ = ["add_top_kbd", "note_kbd", "set_create_wait"]

@router.message(Command("notes"))
async def cmd_notes(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    lang = chat_settings.get_lang(chat_id)
    items = notes_store.list_open_all(user_id, chat_id, limit=50)
    if not items:
        set_create_wait(chat_id, user_id)
        await message.answer("üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.\n–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–±–∞–≤–ª—é.")
        return
    await message.answer(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(items)}):", reply_markup=add_top_kbd(lang))
    for it in items:
        txt = f"‚Ä¢ #{it['id']}: {it['text']}\n–°—Ç–∞—Ç—É—Å: {it['status']}"
        await message.answer(txt, reply_markup=note_kbd(it["id"]))

@router.callback_query(F.data == "note:add")
async def cb_note_add(cq: types.CallbackQuery):
    lang = chat_settings.get_lang(cq.message.chat.id)
    set_create_wait(cq.message.chat.id, cq.from_user.id)
    await cq.message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π." if lang=="ru" else
                            "–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º.")
    await cq.answer()

# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –∂–¥—ë–º –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
@router.message(F.text & ~F.text.startswith("/"))
async def catch_new_note(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if not is_create_wait(chat_id, user_id):
        return  # –Ω–µ –∂–¥—ë–º ‚Äî –ø—É—Å—Ç—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –¥—Ä—É–≥–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
    text = (message.text or "").strip()
    if not text:
        return
    pop_create_wait(chat_id, user_id)
    note_id = notes_store.add(user_id, chat_id, text)
    await message.answer(f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (#{note_id}):\n{text}", reply_markup=remind_kbd(note_id))

@router.callback_query(F.data.startswith("note:done:"))
async def cb_note_done(cq: types.CallbackQuery):
    note_id = int(cq.data.split(":")[2])
    notes_store.set_done(note_id)
    await cq.message.edit_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! (#{note_id})")
    await cq.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

@router.callback_query(F.data.startswith("note:keep:"))
async def cb_note_keep(cq: types.CallbackQuery):
    note_id = int(cq.data.split(":")[2])
    notes_store.keep_open(note_id)
    await cq.message.delete()  # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await cq.answer("–û—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("note:snooze:"))
async def cb_note_snooze(cq: types.CallbackQuery):
    parts = cq.data.split(":")
    note_id = int(parts[2])
    minutes = int(parts[3]) if len(parts) > 3 else 120
    notes_store.snooze(note_id, minutes=minutes)
    await cq.message.edit_text(f"‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. (#{note_id})")
    await cq.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
