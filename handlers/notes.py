# D:\telegram_reminder_bot\handlers\notes.py
from aiogram import Router, types, F
from aiogram.filters import Command
from utils.notes import notes_store
from utils.note_runtime import set_pending

router = Router()

def note_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)", callback_data=f"note:done:{note_id}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç",            callback_data=f"note:keep:{note_id}"),
        ],
        [
            types.InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 1—á",    callback_data=f"note:snooze:{note_id}:60"),
            types.InlineKeyboardButton(text="‚è∞ 2—á",             callback_data=f"note:snooze:{note_id}:120"),
            types.InlineKeyboardButton(text="‚è∞ 3—á",             callback_data=f"note:snooze:{note_id}:180"),
        ],
    ])

def note_remind_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚è∞ 1—á", callback_data=f"note:snooze:{note_id}:60"),
            types.InlineKeyboardButton(text="‚è∞ 2—á", callback_data=f"note:snooze:{note_id}:120"),
            types.InlineKeyboardButton(text="‚è∞ 3—á", callback_data=f"note:snooze:{note_id}:180"),
        ],
        [
            types.InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"note:keep:{note_id}"),
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏‚Ä¶",         callback_data=f"note:custom:{note_id}"),
        ],
    ])

@router.message(Command("notes"))
async def cmd_notes(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    items = notes_store.list_open_all(user_id, chat_id, limit=50)
    if not items:
        await message.answer("üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
        return
    await message.answer(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(items)}):")
    for it in items:
        txt = f"‚Ä¢ #{it['id']}: {it['text']}\n–°—Ç–∞—Ç—É—Å: {it['status']}"
        await message.answer(txt, reply_markup=note_kbd(it["id"]))

@router.callback_query(F.data.startswith("note:done:"))
async def cb_note_done(cq: types.CallbackQuery):
    note_id = int(cq.data.split(":")[2])
    notes_store.set_done(note_id)
    await cq.message.edit_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ! (#{note_id})\n{cq.message.text.splitlines()[0]}")
    await cq.answer("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

@router.callback_query(F.data.startswith("note:keep:"))
async def cb_note_keep(cq: types.CallbackQuery):
    note_id = int(cq.data.split(":")[2])
    notes_store.keep_open(note_id)
    await cq.answer("–û—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("note:snooze:"))
async def cb_note_snooze(cq: types.CallbackQuery):
    parts = cq.data.split(":")
    note_id = int(parts[2])
    minutes = int(parts[3]) if len(parts) > 3 else 120
    notes_store.snooze(note_id, minutes=minutes)
    await cq.message.edit_text(f"‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. (#{note_id})")
    await cq.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@router.callback_query(F.data.startswith("note:custom:"))
async def cb_note_custom(cq: types.CallbackQuery):
    note_id = int(cq.data.split(":")[2])
    set_pending(cq.message.chat.id, cq.from_user.id, note_id)
    await cq.message.answer("–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: `2—á`, `90–º`, `1.5—á`).", parse_mode="Markdown")
    await cq.answer()
