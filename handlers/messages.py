# handlers/messages.py
import re
import asyncio
from datetime import datetime
from aiogram import Router, types, F
from utils.memory import memory
from utils.chat_settings import chat_settings
from utils.notes import notes_store
from utils import info as info_api
from utils.gemini import ask_gemini

# –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Cerebras
try:
    from utils.llm import ask_cerebras as _ask_cerebras
    async def ask_cerebras(*a, **kw):
        return await _ask_cerebras(*a, **kw)
except Exception:
    async def ask_cerebras(*a, **kw):
        return "‚ùó Cerebras –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π Gemini –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ 'cerebras-cloud-sdk'."

router = Router()

# ---- —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ----
WEATHER_RE = re.compile(r"(?:–∫–∞–∫–∞—è|–∫–∞–∫–∞—è —Å—å–æ–≥–æ–¥–Ω—ñ|–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è|—è–∫–∞|—è–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ|–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥–Ω—ñ|–ø–æ–≥–æ–¥—É|–ø–æ–≥–æ–¥—ñ|–ø–æ–≥–æ–¥–∏).{0,10}?(?:–≤|—É)?\s*(?P<city>[\w\-\s–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]+)?", re.I)
HOLIDAY_RE = re.compile(r"(–ø—Ä–∞–∑–¥–Ω–∏–∫|–ø—Ä–∞–∑–¥–Ω–∏–∫–∏|—Å–≤—è—Ç–æ|—Å–≤—è—Ç–∞)", re.I)
SEARCH_RE  = re.compile(r"(–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏|–ø–æ–∏—Å—á–∏|–ø–æ—à—É–∫–∞–π|–∑–Ω–∞–π–¥–∏|–∑–∞–≥—É–≥–ª–∏|google|–ø–æ—à—É–∫|–ø–æ–∏—Å–∫)(.*)", re.I)

# –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–¥–∞—Ç–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Å–∞–º–∏, –∞ –Ω–µ —á–µ—Ä–µ–∑ –ò–ò
WHAT_DAY_RE = re.compile(r"(–∫–∞–∫–æ–π|—è–∫–∏–π)\s+(—Å–µ–≥–æ–¥–Ω—è|—Å—å–æ–≥–æ–¥–Ω—ñ)\s+(–¥–µ–Ω—å|–¥–∞—Ç–∞)", re.I)

NOTE_TRIGGERS = r"(?:–∑–∞–º–µ—Ç–∫–∞|–∑–∞–ø–æ–º–Ω–∏|–∑–∞–ø–∏—à–∏|–ø–æ–º–µ—Ç—å|–ø–æ–º—ñ—Ç—å|–Ω–∞–ø–æ–º–Ω–∏|todo|to-?do|—Å–¥–µ–ª–∞—Ç—å|—Å–¥–µ–ª–∞–π)"

def _extract_note(text: str) -> str | None:
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å ‚Äî –ø–æ–≥–æ–¥–∞/–ø–æ–∏—Å–∫, –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∑–∞–º–µ—Ç–∫—É
    if SEARCH_RE.search(text) or WEATHER_RE.search(text):
        return None
    m = re.search(rf"{NOTE_TRIGGERS}\b[:\- ]*(.+)$", text, flags=re.I | re.S)
    if m:
        return (m.group(1) or "").strip()
    if re.search(rf"{NOTE_TRIGGERS}\b", text, flags=re.I):
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        if len(lines) >= 2:
            return lines[-1]
    return None

def _day_string(lang: str) -> str:
    now = datetime.now()
    days_ru = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    days_uk = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫","–≤—ñ–≤—Ç–æ—Ä–æ–∫","—Å–µ—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä","–ø º—è—Ç–Ω–∏—Ü—è","—Å—É–±–æ—Ç–∞","–Ω–µ–¥—ñ–ª—è"]
    day = days_uk[now.weekday()] if lang=="uk" else days_ru[now.weekday()]
    if lang=="uk":
        return f"–°—å–æ–≥–æ–¥–Ω—ñ {day}, {now.strftime('%d.%m.%Y')}."
    return f"–°–µ–≥–æ–¥–Ω—è {day}, {now.strftime('%d.%m.%Y')}."

@router.message(F.text & ~F.text.startswith("/"))
async def any_text(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text or ""
    lang = chat_settings.get_lang(chat_id)

    # A) –î–µ–Ω—å/–¥–∞—Ç–∞
    if WHAT_DAY_RE.search(text):
        await message.answer(_day_string(lang))
        return

    # B) –ü–æ–≥–æ–¥–∞
    wm = WEATHER_RE.search(text)
    if wm:
        raw_city = (wm.group("city") or "").strip()
        city = re.sub(r"\d{1,2}[./-]\d{1,2}[./-]\d{2,4}", "", raw_city).strip()  # —É–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ "–ö–∏—î–≤—ñ 05.10.2025"
        if not city:
            city = "–ö–∏—ó–≤" if lang=="uk" else "–ö–∏–µ–≤"
        try:
            ans = await info_api.weather_today(city, lang)
        except Exception as e:
            ans = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}"
        await message.answer(ans)
        return

    # C) –ü—Ä–∞–∑–¥–Ω–∏–∫–∏
    if HOLIDAY_RE.search(text):
        country = "UA" if lang=="uk" else "RU"
        try:
            hs = await info_api.holidays_today(country)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return
        if not hs:
            await message.answer("–°—å–æ–≥–æ–¥–Ω—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö —Å–≤—è—Ç –Ω–µ–º–∞—î." if lang=="uk" else "–°–µ–≥–æ–¥–Ω—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç.")
        else:
            lines = [f"‚Ä¢ {h.get('localName') or h.get('name')}" for h in hs]
            await message.answer(("–°–≤—è—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n" if lang=="uk" else "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n") + "\n".join(lines))
        return

    # D) –í–µ–±-–ø–æ–∏—Å–∫
    sm = SEARCH_RE.search(text)
    if sm:
        query = (sm.group(0) or text)
        # –æ—Ç—Ä–µ–∂–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ —Ç–∏–ø–∞ "–Ω–∞–π–¥–∏/–∑–∞–≥—É–≥–ª–∏"
        query = re.sub(r"^(–Ω–∞–π–¥–∏|–ø–æ–∏—â–∏|–ø–æ–∏—Å—á–∏|–ø–æ—à—É–∫–∞–π|–∑–Ω–∞–π–¥–∏|–∑–∞–≥—É–≥–ª–∏|google|–ø–æ—à—É–∫|–ø–æ–∏—Å–∫)\s+", "", query, flags=re.I)
        try:
            ans = await info_api.web_search(query, lang, limit=3)
        except Exception as e:
            ans = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}" if lang=="uk" else f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"
        await message.answer(ans)
        return

    # E) –ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
    note_text = _extract_note(text)
    if note_text:
        note_id = notes_store.add(user_id=user_id, chat_id=chat_id, text=note_text)
        await message.answer(f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (#{note_id}):\n{note_text}")
        return

    # F) –ò–ò-–¥–∏–∞–ª–æ–≥ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    engine = (chat_settings.get_ai(chat_id) or "gemini").strip().lower()
    memory.add(chat_id, "user", text)
    allow_long = bool(re.search(r'–ø–æ–¥—Ä–æ–±|—Ä–∞–∑–≤–µ—Ä–Ω—É|–º–Ω–æ–≥–æ', text, flags=re.I))
    history = memory.get(chat_id)

    try:
        if engine == "gemini":
            reply = await asyncio.wait_for(
                ask_gemini(history=history, allow_long=allow_long, max_len=600),
                timeout=25
            )
        else:
            reply = await asyncio.wait_for(
                ask_cerebras(history=history, allow_long=allow_long, max_len=600),
                timeout=25
            )
    except asyncio.TimeoutError:
        reply = "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ò–ò (25—Å). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏ –º–æ–¥–µ–ª—å."
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}"

    memory.add(chat_id, "assistant", reply)
    await message.answer(reply)
