# handlers/messages.py
import re
from aiogram import Router, types, F
from utils.memory import memory
from utils.chat_settings import chat_settings
from utils.notes import notes_store
from utils import info as info_api
from utils.gemini import ask_gemini
from utils.llm import ask_cerebras

router = Router()

NOTE_TRIGGERS = r"(–∑–∞–º–µ—Ç–∫–∞|–∑–∞–ø–æ–º–Ω–∏|–∑–∞–ø–∏—à–∏|–ø–æ–º–µ—Ç—å|–ø–æ–º—ñ—Ç—å|–Ω–∞–ø–æ–º–Ω–∏|todo|to-?do|—Å–¥–µ–ª–∞—Ç—å|—Å–¥–µ–ª–∞–π)"
WEATHER_RE = re.compile(r"(–ø–æ–≥–æ–¥–∞|–ø–æ–≥–æ–¥—É|–ø–æ–≥–æ–¥—ñ|–ø–æ–≥–æ–¥–∏)(?:\s+–≤| —É)?\s*(?P<city>[\w\-\s–ê-–Ø–∞-—è–Å—ë–Ü—ñ–á—ó–Ñ—î“ê“ë]+)?", re.I)
HOLIDAY_RE = re.compile(r"(–ø—Ä–∞–∑–¥–Ω–∏–∫|–ø—Ä–∞–∑–¥–Ω–∏–∫–∏|—Å–≤—è—Ç–æ|—Å–≤—è—Ç–∞)", re.I)

def _extract_note(text: str) -> str | None:
    if not text:
        return None
    m = re.search(rf"{NOTE_TRIGGERS}\b[:\- ]*(.+)$", text, flags=re.I | re.S)
    if m:
        return m.group(2).strip()
    if re.search(rf"{NOTE_TRIGGERS}\b", text, flags=re.I):
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        if len(lines) >= 2:
            return lines[-1]
    return None

@router.message(F.text & ~F.text.startswith("/"))
async def any_text(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text or ""
    lang = chat_settings.get_lang(chat_id)

    # B) –ë—ã—Å—Ç—Ä—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: –ø–æ–≥–æ–¥–∞ / –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
    wm = WEATHER_RE.search(text)
    if wm:
        city = (wm.group("city") or "").strip() or ("–ö–∏—ó–≤" if lang=="uk" else "–ö–∏–µ–≤")
        try:
            ans = await info_api.weather_today(city, lang)
        except Exception as e:
            ans = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥—ã: {e}"
        await message.answer(ans)
        return

    if HOLIDAY_RE.search(text):
        country = "UA" if lang=="uk" else "RU"
        try:
            hs = await info_api.holidays_today(country)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return
        if not hs:
            await message.answer("–°–µ–≥–æ–¥–Ω—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç." if lang=="ru" else "–°—å–æ–≥–æ–¥–Ω—ñ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö —Å–≤—è—Ç –Ω–µ–º–∞—î.")
        else:
            lines = [f"‚Ä¢ {h.get('localName') or h.get('name')}" for h in hs]
            await message.answer(("–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n" if lang=="ru" else "–°–≤—è—Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:\n") + "\n".join(lines))
        return

    # C) –ó–∞–º–µ—Ç–∫–∞ –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É
    note_text = _extract_note(text)
    if note_text:
        note_id = notes_store.add(user_id=user_id, chat_id=chat_id, text=note_text)
        await message.answer(f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (#{note_id}):\n{note_text}")
        return

    # D) –ò–ò-–¥–∏–∞–ª–æ–≥
    engine = (chat_settings.get_ai(chat_id) or "gemini").strip().lower()
    memory.add(chat_id, "user", text)
    allow_long = bool(re.search(r'–ø–æ–¥—Ä–æ–±|—Ä–∞–∑–≤–µ—Ä–Ω—É|–º–Ω–æ–≥–æ', text, flags=re.I))
    history = memory.get(chat_id)

    try:
        if engine == "gemini":
            reply = await ask_gemini(history=history, allow_long=allow_long, max_len=600)
        else:
            reply = await ask_cerebras(history=history, allow_long=allow_long, max_len=600)
    except Exception as e:
        reply = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ò–ò: {e}"

    memory.add(chat_id, "assistant", reply)
    await message.answer(reply)
