# D:\telegram_reminder_bot\handlers\messages.py
import re
from aiogram import Router, types, F
from utils.llm import ask_ai as ask_cerebras
from utils.gemini import ask_gemini
from utils.memory import memory
from utils.chat_settings import chat_settings
from utils.notes import notes_store
from utils.note_runtime import get_pending, pop_pending

router = Router()

NOTE_TRIGGERS = r"(–∑–∞–º–µ—Ç–∫–∞|–∑–∞–ø–æ–º–Ω–∏|–∑–∞–ø–∏—à–∏|–ø–æ–º–µ—Ç—å|–ø–æ–º—ñ—Ç—å|–Ω–∞–ø–æ–º–Ω–∏|todo|to-?do|—Å–¥–µ–ª–∞—Ç—å|—Å–¥–µ–ª–∞–π)"

def _extract_note(text: str) -> str | None:
    if not text:
        return None
    # 1) –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –±–µ—Ä—ë–º –µ–≥–æ
    m = re.search(rf"{NOTE_TRIGGERS}\b[:\- ]*(.+)$", text, flags=re.I | re.S)
    if m:
        body = m.group(2).strip()
        return body
    # 2) –ï—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä –µ—Å—Ç—å, –Ω–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if re.search(rf"{NOTE_TRIGGERS}\b", text, flags=re.I):
        lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        if len(lines) >= 2:
            return lines[-1]
    return None

def _parse_duration_to_minutes(s: str) -> int | None:
    s = (s or "").strip().lower().replace(" ", "")
    if not s:
        return None
    # 1.5—á
    m = re.fullmatch(r"(\d+(?:[.,]\d+)?)—á", s)
    if m:
        hours = float(m.group(1).replace(",", "."))
        return max(1, int(hours * 60))
    # 90–º / 90–º–∏–Ω
    m = re.fullmatch(r"(\d+)–º(–∏–Ω)?", s)
    if m:
        return max(1, int(m.group(1)))
    # 2h / 120min
    m = re.fullmatch(r"(\d+)h", s)
    if m:
        return max(1, int(m.group(1)) * 60)
    m = re.fullmatch(r"(\d+)(min|mins|minute|minutes)", s)
    if m:
        return max(1, int(m.group(1)))
    # –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ ‚Äî —Å—á–∏—Ç–∞–µ–º —á–∞—Å–∞–º–∏
    m = re.fullmatch(r"(\d+)", s)
    if m:
        return max(1, int(m.group(1)) * 60)
    return None

def _remind_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚è∞ 1—á", callback_data=f"note:snooze:{note_id}:60"),
            types.InlineKeyboardButton(text="‚è∞ 2—á", callback_data=f"note:snooze:{note_id}:120"),
            types.InlineKeyboardButton(text="‚è∞ 3—á", callback_data=f"note:snooze:{note_id}:180"),
        ],
        [
            types.InlineKeyboardButton(text="–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"note:keep:{note_id}"),
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏‚Ä¶",         callback_data=f"note:custom:{note_id}"),
        ],
    ])

def _note_kbd(note_id: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)", callback_data=f"note:done:{note_id}"),
            types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç",            callback_data=f"note:keep:{note_id}"),
        ],
        [
            types.InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 2—á",    callback_data=f"note:snooze:{note_id}:120"),
        ],
    ])

@router.message(F.text & ~F.text.startswith("/"))
async def any_text(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    text = message.text or ""

    # A) –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    pending_note_id = get_pending(chat_id, user_id)
    if pending_note_id:
        minutes = _parse_duration_to_minutes(text)
        if minutes is None:
            await message.answer("–ù–µ –ø–æ–Ω—è–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü—Ä–∏–º–µ—Ä—ã: `2—á`, `90–º`, `1.5—á`.", parse_mode="Markdown")
            return
        pop_pending(chat_id, user_id)
        notes_store.snooze(pending_note_id, minutes=minutes)
        await message.answer(f"‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. (#{pending_note_id})")
        return

    # B) –ö–æ–º–∞–Ω–¥–∞ ¬´–∑–∞–º–µ—Ç–∫–∏¬ª —Å–ª–æ–≤–æ–º
    if text.strip().lower() in {"–∑–∞–º–µ—Ç–∫–∏", "–∑–∞–º–µ—Ç–∫–∞", "notes"}:
        items = notes_store.list_open_all(user_id, chat_id, limit=50)
        if not items:
            await message.answer("üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
            return
        await message.answer(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(items)}):")
        for it in items:
            await message.answer(f"‚Ä¢ #{it['id']}: {it['text']}\n–°—Ç–∞—Ç—É—Å: {it['status']}", reply_markup=_note_kbd(it["id"]))
        return

    # C) –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–Ω–µ —Ç—Ä–µ–±—É–µ–º –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏)
    note_text = _extract_note(text)
    if note_text:
        note_id = notes_store.add(user_id=user_id, chat_id=chat_id, text=note_text)
        await message.answer(
            f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (#{note_id}):\n{note_text}\n\n–ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å?",
            reply_markup=_remind_kbd(note_id)
        )
        return

    # D) –û–±—ã—á–Ω—ã–π –ò–ò-–¥–∏–∞–ª–æ–≥
    engine = (chat_settings.get_ai(chat_id) or "").strip().lower()
    if engine not in ("gemini", "cerebras"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ò–ò —á–µ—Ä–µ–∑ /ai.")
        return

    memory.add(chat_id, "user", text)
    allow_long = bool(re.search(r'–ø–æ–¥—Ä–æ–±|—Ä–∞–∑–≤–µ—Ä–Ω—É|–º–Ω–æ–≥–æ', text, flags=re.I))
    history = memory.get(chat_id)

    if engine == "gemini":
        reply = await ask_gemini(history=history, allow_long=allow_long, max_len=500)
    else:
        reply = await ask_cerebras(history=history, allow_long=allow_long, max_len=500)

    memory.add(chat_id, "assistant", reply)
    await message.answer(reply)
