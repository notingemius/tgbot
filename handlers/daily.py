# handlers/daily.py
from aiogram import Router, types, F
from aiogram.filters import Command
from utils.daily import daily_store
from utils.chat_settings import chat_settings

router = Router()
_add_wait: set[tuple[int,int]] = set()

def dkbd(task_id: int, lang: str) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[[
        types.InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è" if lang=="ru" else "‚úÖ –ó—Ä–æ–±–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ",
                                   callback_data=f"daily:done:{task_id}"),
        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å" if lang=="ru" else "üóë –í–∏–¥–∞–ª–∏—Ç–∏",
                                   callback_data=f"daily:del:{task_id}"),
    ]])

def top_add_kbd(lang: str) -> types.InlineKeyboardMarkup:
    txt = "‚ûï –î–æ–±–∞–≤–∏—Ç—å" if lang=="ru" else "‚ûï –î–æ–¥–∞—Ç–∏"
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=txt, callback_data="daily:add")]
    ])

@router.message(Command("daily"))
async def cmd_daily(message: types.Message):
    await show_daily_list(message)

async def show_daily_list(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    lang = chat_settings.get_lang(chat_id)
    tasks = daily_store.list(user_id, chat_id)
    if not tasks:
        _add_wait.add((chat_id, user_id))
        await message.answer("–°–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî —è –¥–æ–±–∞–≤–ª—é." if lang=="ru" else
                             "–°–ø–∏—Å–æ–∫ —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî —è –¥–æ–¥–∞–º.")
        return
    await message.answer("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ" if lang=="ru" else "üìÖ –©–æ–¥–µ–Ω–Ω—ñ", reply_markup=top_add_kbd(lang))
    for t in tasks:
        status = "‚úÖ —Å–µ–≥–æ–¥–Ω—è" if t["done_today"] else "‚¨ú —Å–µ–≥–æ–¥–Ω—è"
        await message.answer(f"‚Ä¢ #{t['id']}: {t['text']}  ‚Äî {status}", reply_markup=dkbd(t["id"], lang))

@router.callback_query(F.data == "daily:add")
async def cb_daily_add(cq: types.CallbackQuery):
    chat_id = cq.message.chat.id
    user_id = cq.from_user.id
    lang = chat_settings.get_lang(chat_id)
    _add_wait.add((chat_id, user_id))
    await cq.message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π." if lang=="ru" else
                            "–ù–∞–¥—ñ—à–ª–∏ —Ç–µ–∫—Å—Ç —â–æ–¥–µ–Ω–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–¥–Ω–∏–º —Ä—è–¥–∫–æ–º.")
    await cq.answer()

@router.message(F.text & ~F.text.startswith("/"))
async def catch_daily_add(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if (chat_id, user_id) not in _add_wait:
        return
    text = (message.text or "").strip()
    if not text:
        return
    _add_wait.discard((chat_id, user_id))
    task_id = daily_store.add(user_id, chat_id, text)
    await message.answer(f"–î–æ–±–∞–≤–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é #{task_id}")
    await show_daily_list(message)

@router.callback_query(F.data.startswith("daily:done:"))
async def cb_daily_done(cq: types.CallbackQuery):
    task_id = int(cq.data.split(":")[2])
    daily_store.mark_done(task_id)
    await cq.message.edit_text("‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    await cq.answer("–ì–æ—Ç–æ–≤–æ")

@router.callback_query(F.data.startswith("daily:del:"))
async def cb_daily_del(cq: types.CallbackQuery):
    task_id = int(cq.data.split(":")[2])
    daily_store.delete(task_id)
    await cq.message.edit_text("üóë –£–¥–∞–ª–µ–Ω–æ")
    await cq.answer("–£–¥–∞–ª–µ–Ω–æ")
