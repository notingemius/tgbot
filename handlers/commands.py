# D:\telegram_reminder_bot\handlers\commands.py
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
)
from utils.chat_settings import chat_settings
from utils.memory import memory
from utils.notes import notes_store

router = Router()

# ----- –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è -----
LANG_LABELS = {
    "choose": {"ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", "uk": "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É"},
    "lang_ru": {"ru": "–†—É—Å—Å–∫–∏–π", "uk": "–†–æ—Å—ñ–π—Å—å–∫–∞"},
    "lang_uk": {"ru": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"},
    "menu_title": {"ru": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "uk": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"},
    "menu_ai": {"ru": "ü§ñ –ò–ò", "uk": "ü§ñ –®–Ü"},
    "menu_notes": {"ru": "üìù –ó–∞–º–µ—Ç–∫–∏", "uk": "üìù –ù–æ—Ç–∞—Ç–∫–∏"},
    "menu_daily": {"ru": "üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", "uk": "üìÖ –©–æ–¥–µ–Ω–Ω—ñ"},
    "engine_set": {"ru": "‚úÖ –î–≤–∏–∂–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ", "uk": "‚úÖ –î–≤–∏–≥—É–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: "},
    "ctx_cleared": {"ru": "‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", "uk": "‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω–æ. –ú–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."},
    "pick_ai": {"ru": "–í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫ –ò–ò:", "uk": "–û–±–µ—Ä–∏ –¥–≤–∏–≥—É–Ω –®–Ü:"},
    "no_open_notes": {"ru": "üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.", "uk": "üìù –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –Ω–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î."},
}

def t(lang: str, key: str) -> str:
    return LANG_LABELS.get(key, {}).get(lang, LANG_LABELS.get(key, {}).get("ru", key))

def main_menu_kbd(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=t(lang, "menu_ai"))],
            [KeyboardButton(text=t(lang, "menu_notes")), KeyboardButton(text=t(lang, "menu_daily"))],
        ],
        resize_keyboard=True, is_persistent=True
    )

def lang_kbd() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")],
            [KeyboardButton(text="–†—É—Å—Å–∫–∏–π")],
        ],
        resize_keyboard=True, one_time_keyboard=True
    )

def ai_picker_kbd() -> InlineKeyboardMarkup:
    kb = [[
        InlineKeyboardButton(text="ü§ñ Cerebras (Qwen)", callback_data="ai:cerebras"),
        InlineKeyboardButton(text="üß† Gemini 2.5 Flash", callback_data="ai:gemini"),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    chat_id = message.chat.id
    lang = chat_settings.get_lang(chat_id)
    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â—ë –Ω–µ –≤—ã–±–∏—Ä–∞–ª–∏ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
    if lang not in ("ru", "uk"):
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=lang_kbd())
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(f"{t(lang,'menu_title')} ‚úÖ", reply_markup=main_menu_kbd(lang))

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–º–µ—Ç–∫–∏ (–∫–∞–∫ –ø—Ä–µ–∂–¥–µ)
    user_id = message.from_user.id
    items = notes_store.list_pending(user_id, chat_id, limit=20)
    for it in items:
        from .notes import note_kbd as _nk
        await message.answer(
            f"üìù –ó–∞–º–µ—Ç–∫–∞ #{it['id']}:\n{it['text']}\n\n–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?",
            reply_markup=_nk(it["id"])
        )

@router.message(F.text.in_({"–†—É—Å—Å–∫–∏–π","–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"}))
async def on_lang_pick(message: types.Message):
    val = message.text.strip()
    lang = "uk" if val.lower().startswith("—É–∫—Ä") else "ru"
    chat_settings.set_lang(message.chat.id, lang)
    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º
    await message.answer(t(lang, "menu_title") + " ‚úÖ", reply_markup=main_menu_kbd(lang))

@router.message(Command("ai"))
async def cmd_ai(message: types.Message):
    lang = chat_settings.get_lang(message.chat.id)
    await message.answer(t(lang, "pick_ai"), reply_markup=ai_picker_kbd())

@router.callback_query(F.data.startswith("ai:"))
async def on_ai_pick(cq: types.CallbackQuery):
    _, ai = cq.data.split(":", 1)
    chat_settings.set_ai(cq.message.chat.id, ai.lower().strip())
    from utils.memory import memory
    memory.reset(cq.message.chat.id)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    lang = chat_settings.get_lang(cq.message.chat.id)
    await cq.message.edit_text(t(lang, "engine_set") + ai + f"\n{t(lang,'ctx_cleared')}")
    await cq.answer()

@router.message(F.text)
async def menu_router(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (ReplyKeyboard)."""
    text = (message.text or "").strip()
    lang = chat_settings.get_lang(message.chat.id)

    if text == t(lang, "menu_ai"):
        await message.answer(t(lang, "pick_ai"), reply_markup=ai_picker_kbd())
        return

    if text == t(lang, "menu_notes"):
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –∏—Ö –Ω–µ—Ç
        user_id = message.from_user.id
        chat_id = message.chat.id
        items = notes_store.list_open_all(user_id, chat_id, limit=50)
        if not items:
            await message.answer(t(lang, "no_open_notes"))
            return
        from .notes import note_kbd as _nk
        await message.answer(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(items)}):" if lang=="ru" else f"üìù –í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏ ({len(items)}):")
        for it in items:
            await message.answer(f"‚Ä¢ #{it['id']}: {it['text']}\n–°—Ç–∞—Ç—É—Å: {it['status']}", reply_markup=_nk(it["id"]))
        return

    if text == t(lang, "menu_daily"):
        from .daily import show_daily_list
        await show_daily_list(message)
        return

    # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑ –º–µ–Ω—é ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å; –¥–∞–ª—å—à–µ –ø–æ–π–º–∞–µ—Ç handlers/messages.py
