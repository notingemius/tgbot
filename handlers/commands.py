# D:\telegram_reminder_bot\handlers\commands.py
from aiogram import Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.chat_settings import chat_settings
from utils.memory import memory
from utils.notes import notes_store

router = Router()

def ai_picker_kbd() -> InlineKeyboardMarkup:
    kb = [[
        InlineKeyboardButton(text="ü§ñ Cerebras (Qwen)", callback_data="ai:cerebras"),
        InlineKeyboardButton(text="üß† Gemini 2.5 Flash", callback_data="ai:gemini"),
    ]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def note_kbd(note_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)", callback_data=f"note:done:{note_id}"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç",            callback_data=f"note:keep:{note_id}"),
        ],
        [   InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 2—á",    callback_data=f"note:snooze:{note_id}:120") ],
    ])

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    current = chat_settings.get_ai(message.chat.id)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–≤–∏–∂–æ–∫ –ò–ò (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å):\n"
        f"–¢–µ–∫—É—â–∏–π: {current or '–Ω–µ –≤—ã–±—Ä–∞–Ω'}\n\n"
        "–Ø –ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç (SQLite, TTL=2—á). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–≤–µ—á–∞—é –∫–æ—Ä–æ—Ç–∫–æ (‚â§500).\n"
        "–ö–æ–º–∞–Ω–¥–∞ /notes ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫.",
        reply_markup=ai_picker_kbd()
    )

    # –ø–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    user_id = message.from_user.id
    chat_id = message.chat.id
    items = notes_store.list_pending(user_id, chat_id, limit=20)
    for it in items:
        await message.answer(
            f"üìù –ó–∞–º–µ—Ç–∫–∞ #{it['id']}:\n{it['text']}\n\n–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?",
            reply_markup=note_kbd(it["id"])
        )

@router.callback_query(F.data.startswith("ai:"))
async def on_ai_pick(cq: types.CallbackQuery):
    _, ai = cq.data.split(":", 1)
    chat_settings.set_ai(cq.message.chat.id, ai.lower().strip())
    memory.reset(cq.message.chat.id)  # –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ò–ò
    await cq.message.edit_text(
        f"‚úÖ –î–≤–∏–∂–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ai}\n‚ÑπÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    await cq.answer()

@router.message(Command("ai"))
async def cmd_ai(message: types.Message):
    await message.answer("–°–º–µ–Ω–∏—Ç—å –¥–≤–∏–∂–æ–∫ –ò–ò:", reply_markup=ai_picker_kbd())

@router.message(Command("notes"))
async def cmd_notes(message: types.Message):
    # –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–µ–º —Å—é–¥–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    user_id = message.from_user.id
    chat_id = message.chat.id
    items = notes_store.list_open_all(user_id, chat_id, limit=50)
    if not items:
        await message.answer("üìù –û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.")
        return
    await message.answer(f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(items)}):")
    for it in items:
        await message.answer(f"‚Ä¢ #{it['id']}: {it['text']}\n–°—Ç–∞—Ç—É—Å: {it['status']}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ)", callback_data=f"note:done:{it['id']}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç",            callback_data=f"note:keep:{it['id']}"),
            ],
            [   InlineKeyboardButton(text="‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å 2—á",    callback_data=f"note:snooze:{it['id']}:120") ],
        ]))

@router.message(Command("reset"))
async def cmd_reset(message: types.Message):
    memory.reset(message.chat.id)
    await message.answer("‚ôªÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
