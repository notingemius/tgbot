#!/usr/bin/env python3
"""
–£–º–Ω—ã–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º
"""
import os
import logging
import sqlite3
import re
import random
import json
import asyncio
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DB_PATH = "bot.db"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
conversation_context = {}

# ----------------- Database helpers -----------------
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫
    cur.execute("""
    CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        text TEXT,
        created_at TEXT
    );
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        text TEXT,
        status TEXT,
        next_check TEXT,
        created_at TEXT
    );
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ò–ò
    cur.execute("""
    CREATE TABLE IF NOT EXISTS knowledge (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        pattern TEXT,
        response TEXT,
        action_type TEXT,
        action_params TEXT,
        usage_count INTEGER DEFAULT 0
    );
    """)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    try:
        cur.execute("SELECT action_type FROM knowledge LIMIT 1")
    except sqlite3.OperationalError:
        logger.info("–î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ç–∞–±–ª–∏—Ü—É knowledge...")
        cur.execute("ALTER TABLE knowledge ADD COLUMN action_type TEXT")
        cur.execute("ALTER TABLE knowledge ADD COLUMN action_params TEXT")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("""
    CREATE TABLE IF NOT EXISTS user_context (
        user_id INTEGER PRIMARY KEY,
        last_messages TEXT,
        preferences TEXT,
        last_updated TEXT
    );
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    basic_knowledge = [
        (r"\b(–ø—Ä–∏–≤–µ—Ç|hello|hi|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π|–∫—É)\b", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?", "greeting", None),
        (r"\b(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\b", "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –æ–±—â–µ–Ω–∏—é —Å —Ç–æ–±–æ–π üòä", "small_talk", None),
        (r"\b(—á—Ç–æ –¥–µ–ª–∞–µ—à—å|—á–µ–º –∑–∞–Ω—è—Ç|—Ä–∞–±–æ—Ç–∞–µ—à—å)\b", "–û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö!", "small_talk", None),
        (r"\b(—Å–ø–∞—Å–∏–±–æ|–±–ª–∞–≥–æ–¥–∞—Ä—é|–ø–∞—Å–∏–±|thanks)\b", "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è –µ—â—ë üòä", "small_talk", None),
        (r"\b(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|–ø—Ä–æ—â–∞–π|—É–≤–∏–¥–∏–º—Å—è|goodbye)\b", "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—â–µ–Ω–∏—è!", "small_talk", None),
        (r"\b(–∫—Ç–æ —Ç—ã|—á—Ç–æ —Ç—ã|—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ)\b", "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–±–æ—Ç! –Ø –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–µ–ª–∞—Ö –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π.", "small_talk", None),
        (r"\b(—á—Ç–æ —É–º–µ–µ—à—å|–∫–æ–º–∞–Ω–¥—ã|–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)\b", "–Ø –º–æ–≥—É:\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏: /note\n‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏: /task\n‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª: /tasks\n‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: /remind\n‚Ä¢ –ò –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è!", "small_talk", None),
        (r"\b(—Ö–æ—Ä–æ—à–æ|–æ—Ç–ª–∏—á–Ω–æ|–Ω–æ—Ä–º|–Ω–æ—Ä–º–∞–ª—å–Ω–æ)\b", "–≠—Ç–æ –∑–¥–æ—Ä–æ–≤–æ! –†–∞–¥ –∑–∞ —Ç–µ–±—è üòä", "small_talk", None),
        (r"\b(–ø–ª–æ—Ö–æ|–Ω–µ –æ—á–µ–Ω—å|—É—Å—Ç–∞–ª|—É—Å—Ç–∞–ª–∞|—É—Å—Ç–∞–ª–æ–µ)\b", "–ú–Ω–µ –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å... –ú–æ–∂–µ—Ç, –æ—Ç–¥–æ—Ö–Ω–µ—à—å –∏–ª–∏ —Å–¥–µ–ª–∞–µ—à—å —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ?", "small_talk", None),
        (r"\b(–ª—é–±–ª—é —Ç–µ–±—è|—Ç—ã –ª—É—á—à–∏–π|–º–æ–ª–æ–¥–µ—Ü)\b", "–°–ø–∞—Å–∏–±–æ! –¢—ã —Ç–æ–∂–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π! üòç", "small_talk", None),
        (r"\b(–ø–æ–≥–æ–¥–∞|–Ω–∞ —É–ª–∏—Ü–µ|–¥–æ–∂–¥—å|—Å–æ–ª–Ω—Ü–µ)\b", "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–æ —Å–æ–≤–µ—Ç—É—é –≤—ã–≥–ª—è–Ω—É—Ç—å –≤ –æ–∫–Ω–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ!", "small_talk", None),
        (r"\b(–≤—Ä–µ–º—è|–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å|—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏)\b", "–°–µ–π—á–∞—Å {time}", "small_talk", None),
        (r"\b(–¥–∞—Ç–∞|—á–∏—Å–ª–æ|–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è)\b", "–°–µ–≥–æ–¥–Ω—è {date}", "small_talk", None),
        (r"\b(—à—É—Ç–∫–∞|–ø–æ—à—É—Ç–∏|—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É)\b", "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!", "small_talk", None),
        (r"\b(—Å–æ–≤–µ—Ç|–ø–æ—Å–æ–≤–µ—Ç—É–π|—á—Ç–æ –¥–µ–ª–∞—Ç—å)\b", "–°–æ–≤–µ—Ç—É—é —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º!", "small_talk", None),
        (r"\b(–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç|—Ç–≤–æ–µ –∏–º—è)\b", "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫! –ê —Ç–µ–±—è –∫–∞–∫ –∑–æ–≤—É—Ç?", "small_talk", None),
        (r"\b(–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–µ –∏–º—è)\b", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!", "small_talk", None),
        (r"\b(—á—Ç–æ –Ω–æ–≤–æ–≥–æ|–Ω–æ–≤–æ—Å—Ç–∏)\b", "–£ –º–µ–Ω—è –≤—Å—ë –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –∞ —É —Ç–µ–±—è —á—Ç–æ –Ω–æ–≤–æ–≥–æ?", "small_talk", None),
        (r"\b(—Å–∫—É—á–Ω–æ|–Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å)\b", "–ú–æ–∂–µ—Ç, –∑–∞–π–º–µ—à—å—Å—è —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º? –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–∞–º–∏!", "small_talk", None),
        (r"\b(—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏|–¥–æ–±—Ä–æ–π –Ω–æ—á–∏)\b", "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –•–æ—Ä–æ—à–∏—Ö —Å–Ω–æ–≤ üí§", "small_talk", None),
        (r"\b(–∑–∞–ø–∏—à–∏|–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞–π) –∑–∞–º–µ—Ç–∫—É (.*)", "–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {note_text}", "create_note", "{'note_text': '$2'}"),
        (r"\b(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω–∏—Ç—å) —á–µ—Ä–µ–∑ (\d+) (–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤) (.*)", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {reminder_text}", "create_reminder", "{'minutes': $2, 'reminder_text': '$4'}"),
        (r"\b(–ø–æ–∫–∞–∂–∏|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–æ—Ç–∫—Ä–æ–π) –∑–∞–º–µ—Ç–∫–∏\b", "–í–æ—Ç –≤–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", "show_notes", None),
        (r"\b(—á—Ç–æ —è –ø–∏—Å–∞–ª|–º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è|–∏—Å—Ç–æ—Ä–∏—è)\b", "–í–æ—Ç –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", "show_history", None),
    ]
    
    cur.execute("SELECT COUNT(*) FROM knowledge")
    if cur.fetchone()[0] == 0:
        for pattern, response, action_type, action_params in basic_knowledge:
            cur.execute(
                "INSERT INTO knowledge (pattern, response, action_type, action_params) VALUES (?, ?, ?, ?)",
                (pattern, response, action_type, action_params)
            )
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É")
    
    conn.commit()
    conn.close()


def add_note(user_id: int, text: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO notes (user_id, text, created_at) VALUES (?, ?, ?)",
        (user_id, text, datetime.utcnow().isoformat())
    )
    conn.commit()
    conn.close()


def list_notes(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT id, text, created_at FROM notes WHERE user_id=? ORDER BY id DESC",
        (user_id,)
    )
    rows = cur.fetchall()
    conn.close()
    return rows


def add_task(user_id: int, text: str, next_check: datetime):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO tasks (user_id, text, status, next_check, created_at) VALUES (?, ?, ?, ?, ?)",
        (user_id, text, "pending", next_check.isoformat(), datetime.utcnow().isoformat())
    )
    tid = cur.lastrowid
    conn.commit()
    conn.close()
    return tid


def get_task(task_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "SELECT id, user_id, text, status, next_check FROM tasks WHERE id=?",
        (task_id,)
    )
    row = cur.fetchone()
    conn.close()
    return row


def set_task_done(task_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE tasks SET status='done' WHERE id=?", (task_id,))
    conn.commit()
    conn.close()


def update_task_next_check(task_id: int, next_check: datetime):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("UPDATE tasks SET next_check=? WHERE id=?", (next_check.isoformat(), task_id))
    conn.commit()
    conn.close()


def list_pending_tasks():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, text, status, next_check FROM tasks WHERE status='pending'")
    rows = cur.fetchall()
    conn.close()
    return rows


def save_user_context(user_id: int, message: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    cur.execute("SELECT last_messages FROM user_context WHERE user_id=?", (user_id,))
    result = cur.fetchone()
    
    if result:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        messages = json.loads(result[0])
        messages.append({"text": message, "time": datetime.now().isoformat()})
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(messages) > 10:
            messages = messages[-10:]
        
        cur.execute(
            "UPDATE user_context SET last_messages=?, last_updated=? WHERE user_id=?",
            (json.dumps(messages), datetime.now().isoformat(), user_id)
        )
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        messages = [{"text": message, "time": datetime.now().isoformat()}]
        cur.execute(
            "INSERT INTO user_context (user_id, last_messages, last_updated) VALUES (?, ?, ?)",
            (user_id, json.dumps(messages), datetime.now().isoformat())
        )
    
    conn.commit()
    conn.close()


def get_user_context(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT last_messages FROM user_context WHERE user_id=?", (user_id,))
    result = cur.fetchone()
    conn.close()
    
    if result:
        return json.loads(result[0])
    return []


def find_response(text: str, user_id: int = None):
    """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    try:
        cur.execute("SELECT id, pattern, response, action_type, action_params FROM knowledge")
    except sqlite3.OperationalError as e:
        if "no such column" in str(e):
            # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            cur.execute("SELECT id, pattern, response FROM knowledge")
            rows = cur.fetchall()
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            rows = [(row[0], row[1], row[2], None, None) for row in rows]
        else:
            raise
    else:
        rows = cur.fetchall()
    
    conn.close()
    
    text_lower = text.lower()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id:
        save_user_context(user_id, text)
    
    for row in rows:
        pattern, response, action_type, action_params = row[1], row[2], row[3], row[4]
        match = re.search(pattern, text_lower, re.IGNORECASE)
        
        if match:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            conn = sqlite3.connect(DB_PATH)
            cur = conn.cursor()
            cur.execute("UPDATE knowledge SET usage_count = usage_count + 1 WHERE id=?", (row[0],))
            conn.commit()
            conn.close()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            response = process_response_template(response, match, user_id)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
            if action_type and user_id:
                response = execute_action(action_type, action_params, match, user_id, response)
                return response
            
            return response
    
    return None


def process_response_template(response: str, match: re.Match, user_id: int = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    # –ó–∞–º–µ–Ω—è–µ–º {time} –∏ {date}
    if "{time}" in response:
        response = response.replace("{time}", datetime.now().strftime("%H:%M"))
    if "{date}" in response:
        response = response.replace("{date}", datetime.now().strftime("%d.%m.%Y"))
    
    # –ó–∞–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    for i in range(1, 10):
        if f"${i}" in response and i <= len(match.groups()):
            response = response.replace(f"${i}", match.group(i))
        if f"{{group{i}}}" in response and i <= len(match.groups()):
            response = response.replace(f"{{group{i}}}", match.group(i))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    if "{note_text}" in response and len(match.groups()) >= 1:
        response = response.replace("{note_text}", match.group(2 if len(match.groups()) >= 2 else 1))
    
    if "{reminder_text}" in response and len(match.groups()) >= 4:
        response = response.replace("{reminder_text}", match.group(4))
    
    return response


def execute_action(action_type: str, action_params: str, match: re.Match, user_id: int, response: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        if action_type == "create_note":
            # –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
            note_text = match.group(2) if len(match.groups()) >= 2 else match.group(1)
            add_note(user_id, note_text)
            
        elif action_type == "create_reminder":
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            minutes = int(match.group(2))
            reminder_text = match.group(4)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ –º–∏–Ω—É—Ç—ã
            if match.group(3) in ["—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"]:
                minutes *= 60
                
            next_check = datetime.utcnow() + timedelta(minutes=minutes)
            add_task(user_id, reminder_text, next_check)
            
        elif action_type == "show_notes":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–º–µ—Ç–∫–∏
            notes = list_notes(user_id)
            if notes:
                notes_text = "\n".join([f"{i+1}. {note[1]}" for i, note in enumerate(notes[:5])])
                response = f"üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n\n{notes_text}"
            else:
                response = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."
                
        elif action_type == "show_history":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            history = get_user_context(user_id)
            if history:
                history_text = "\n".join([f"{i+1}. {msg['text']}" for i, msg in enumerate(history[-5:])])
                response = f"üìù –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{history_text}"
            else:
                response = "üìù –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."

    return response


def add_knowledge(pattern: str, response: str, action_type: str = None, action_params: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É"""
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO knowledge (pattern, response, action_type, action_params) VALUES (?, ?, ?, ?)",
        (pattern, response, action_type, action_params)
    )
    conn.commit()
    conn.close()


# ----------------- Handlers -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ò–ò ü§ñ\n\n"
        "–Ø –ø–æ–Ω–∏–º–∞—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å –∏ –º–æ–≥—É:\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω')\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ')\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞\n\n"
        "–¢–∞–∫–∂–µ —è —É–º–µ—é –æ–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å üòä"
    )


async def note_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /note <—Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏>")
        return
    text = " ".join(args)
    add_note(user.id, text)
    await update.message.reply_text("üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")


async def notes_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    rows = list_notes(user.id)
    if not rows:
        await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    
    lines = []
    for i, r in enumerate(rows[:10], 1):
        lines.append(f"{i}. {r[1]}  ({r[2][:10]})")
    
    await update.message.reply_text("üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n\n" + "\n".join(lines))


async def task_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /task <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>")
        return
    try:
        minutes = int(args[0])
    except ValueError:
        await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç).")
        return
    text = " ".join(args[1:])
    next_check = datetime.utcnow() + timedelta(minutes=minutes)
    task_id = add_task(user.id, text, next_check)
    context.job_queue.run_once(send_task_check, when=minutes * 60, data={"task_id": task_id, "chat_id": update.effective_chat.id})
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")


async def tasks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    rows = [r for r in list_pending_tasks() if r[1] == user.id]
    if not rows:
        await update.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    
    lines = []
    for r in rows:
        nid, uid, text, status, next_check = r
        dt = datetime.fromisoformat(next_check)
        local_time = dt.strftime("%H:%M")
        lines.append(f"‚Ä¢ {text} (–≤ {local_time})")
    
    await update.message.reply_text("üìù –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n".join(lines))


async def remind_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind <–º–∏–Ω—É—Ç—ã> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        minutes = int(args[0])
    except ValueError:
        await update.message.reply_text("–ü–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç).")
        return
    text = " ".join(args[1:])
    context.job_queue.run_once(send_simple_reminder, when=minutes * 60, data={"chat_id": update.effective_chat.id, "text": text})
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")


async def learn_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –±–æ—Ç–∞ –Ω–æ–≤—ã–º –æ—Ç–≤–µ—Ç–∞–º"""
    user = update.effective_user
    args = context.args
    
    if not args or len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /learn <—à–∞–±–ª–æ–Ω> <–æ—Ç–≤–µ—Ç>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: /learn –∫–∞–∫–ø–æ–≥–æ–¥–∞ –ü–æ–≥–æ–¥—É —è –Ω–µ –∑–Ω–∞—é, –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ :)"
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: –ø–µ—Ä–≤—ã–π - —à–∞–±–ª–æ–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ—Ç–≤–µ—Ç
    pattern = args[0]
    response = " ".join(args[1:])
    
    add_knowledge(pattern, response)
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")


async def context_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_context = get_user_context(user.id)
    
    if not user_context:
        await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—É—Å—Ç.")
        return
    
    context_text = "\n".join([f"{i+1}. {msg['text']}" for i, msg in enumerate(user_context)])
    await update.message.reply_text(f"üìù –ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n{context_text}")


# job callbacks
async def send_simple_reminder(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    chat_id = data["chat_id"]
    text = data["text"]
    await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")


async def send_task_check(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    task_id = data["task_id"]
    chat_id = data["chat_id"]
    row = get_task(task_id)
    if not row:
        return
    tid, user_id, text, status, next_check = row
    if status != "pending":
        return
    kb = [
        [InlineKeyboardButton("–î–∞ ‚úÖ", callback_data=f"task:{tid}:yes"),
         InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data=f"task:{tid}:no")],
        [InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å 10m", callback_data=f"task:{tid}:snooze:10"),
         InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å 30m", callback_data=f"task:{tid}:snooze:30"),
         InlineKeyboardButton("–û—Ç–ª–æ–∂–∏—Ç—å 60m", callback_data=f"task:{tid}:snooze:60")],
    ]
    await context.bot.send_message(chat_id=chat_id, text=f"‚úÖ –°–¥–µ–ª–∞–Ω–æ? ‚Äî {text}", reply_markup=InlineKeyboardMarkup(kb))


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    parts = data.split(":")
    if parts[0] != "task":
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return
    task_id = int(parts[1])
    action = parts[2]
    if action == "yes":
        set_task_done(task_id)
        await query.edit_message_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–º–µ—Ç–∏–ª –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ.")
    elif action == "no":
        await query.edit_message_text("‚ùå –ü–æ–Ω—è–ª, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.")
    elif action == "snooze":
        minutes = int(parts[3])
        next_time = datetime.utcnow() + timedelta(minutes=minutes)
        update_task_next_check(task_id, next_time)
        context.job_queue.run_once(send_task_check, when=minutes * 60, data={"task_id": task_id, "chat_id": query.message.chat.id})
        await query.edit_message_text(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    user_id = update.effective_user.id
    
    if not text:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        return
    
    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    response = find_response(text, user_id)
    
    if response:
        await update.message.reply_text(response)
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    remind_match = re.search(r"–Ω–∞–ø–æ–º–Ω–∏\s+(–º–Ω–µ\s+)?(—á–µ—Ä–µ–∑\s+)?(\d+)\s+(–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)\s+(.*)", text, re.IGNORECASE)
    if remind_match:
        minutes = int(remind_match.group(3))
        unit = remind_match.group(4)
        task_text = remind_match.group(5)
        
        if unit in ["—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"]:
            minutes *= 60
            
        next_check = datetime.utcnow() + timedelta(minutes=minutes)
        task_id = add_task(user_id, task_text, next_check)
        context.job_queue.run_once(
            send_task_check, 
            when=minutes * 60, 
            data={"task_id": task_id, "chat_id": update.effective_chat.id}
        )
        
        await update.message.reply_text(f"‚úÖ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –æ '{task_text}' —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    note_match = re.search(r"(–∑–∞–ø–∏—à–∏|–¥–æ–±–∞–≤—å|—Å–æ–∑–¥–∞–π)(\s+–º–Ω–µ)?\s+–∑–∞–º–µ—Ç–∫—É\s+(–Ω–∞\s+)?(.*)", text, re.IGNORECASE)
    if note_match:
        note_text = note_match.group(4)
        add_note(user_id, note_text)
        await update.message.reply_text(f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {note_text}")
        return
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
    general_responses = [
        "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ú–æ–≥—É —è –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —á–µ–º-—Ç–æ –µ—â–µ?",
        "–ó–∞–ø–∏—Å–∞–ª –±—ã —ç—Ç–æ, –Ω–æ —è –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç üòä",
        "–ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!",
        "–Ø –µ—â–µ —É—á—É—Å—å –ø–æ–Ω–∏–º–∞—Ç—å –ª—é–¥–µ–π, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –∏–∑–æ –≤—Å–µ—Ö —Å–∏–ª!",
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É. –ú–æ–∂–µ—Ç, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—à—å –∏–Ω–∞—á–µ?",
        "–ó–∞–±–∞–≤–Ω–æ! –ê —á—Ç–æ –µ—â–µ —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å?",
        "–Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–ª –æ–± —ç—Ç–æ–º, –Ω–æ –º–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—É—á–∏–ª–∏ –º–µ–Ω—è —ç—Ç–æ–π —Ç–µ–º–µ üòÖ"
    ]
    
    await update.message.reply_text(random.choice(general_responses))


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    token = TELEGRAM_TOKEN
    if not token:
        print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:")
        print("CMD: set TELEGRAM_TOKEN=–í–ê–®_–¢–û–ö–ï–ù")
        print("PowerShell: $env:TELEGRAM_TOKEN = \"–í–ê–®_–¢–û–ö–ï–ù\"")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("note", note_cmd))
    application.add_handler(CommandHandler("notes", notes_cmd))
    application.add_handler(CommandHandler("task", task_cmd))
    application.add_handler(CommandHandler("tasks", tasks_cmd))
    application.add_handler(CommandHandler("remind", remind_cmd))
    application.add_handler(CommandHandler("learn", learn_cmd))
    application.add_handler(CommandHandler("context", context_cmd))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)...")
    application.run_polling()


if __name__ == "__main__":
    main()