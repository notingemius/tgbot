import sqlite3
from datetime import datetime

def init_db(db_path):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫
    cur.execute("""
    CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        text TEXT,
        created_at TEXT
    );
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        text TEXT,
        status TEXT,
        next_check TEXT,
        created_at TEXT
    );
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –ò–ò
    cur.execute("""
    CREATE TABLE IF NOT EXISTS knowledge (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        pattern TEXT,
        response TEXT,
        action_type TEXT,
        action_params TEXT,
        usage_count INTEGER DEFAULT 0
    );
    """)
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("""
    CREATE TABLE IF NOT EXISTS user_context (
        user_id INTEGER PRIMARY KEY,
        last_messages TEXT,
        preferences TEXT,
        last_updated TEXT
    );
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è
    basic_knowledge = [
        (r"\b(–ø—Ä–∏–≤–µ—Ç|hello|hi|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|—Ö–∞–π|–∫—É)\b", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?", "greeting", None),
        (r"\b(–∫–∞–∫ –¥–µ–ª–∞|–∫–∞–∫ —Ç—ã|–∫–∞–∫ –∂–∏–∑–Ω—å|–∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)\b", "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –æ–±—â–µ–Ω–∏—é —Å —Ç–æ–±–æ–π üòä", "small_talk", None),
        # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –¥—Ä—É–≥–∏–µ –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã...
    ]
    
    cur.execute("SELECT COUNT(*) FROM knowledge")
    if cur.fetchone()[0] == 0:
        for pattern, response, action_type, action_params in basic_knowledge:
            cur.execute(
                "INSERT INTO knowledge (pattern, response, action_type, action_params) VALUES (?, ?, ?, ?)",
                (pattern, response, action_type, action_params)
            )
    
    conn.commit()
    conn.close()